/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, OrderCategory as PrismaOrderCategory } from "@prisma/client";

export class OrderCategoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OrderCategoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.orderCategory.count(args);
  }

  async orderCategories(
    args: Prisma.OrderCategoryFindManyArgs
  ): Promise<PrismaOrderCategory[]> {
    return this.prisma.orderCategory.findMany(args);
  }
  async orderCategory(
    args: Prisma.OrderCategoryFindUniqueArgs
  ): Promise<PrismaOrderCategory | null> {
    return this.prisma.orderCategory.findUnique(args);
  }
  async createOrderCategory(
    args: Prisma.OrderCategoryCreateArgs
  ): Promise<PrismaOrderCategory> {
    return this.prisma.orderCategory.create(args);
  }
  async updateOrderCategory(
    args: Prisma.OrderCategoryUpdateArgs
  ): Promise<PrismaOrderCategory> {
    return this.prisma.orderCategory.update(args);
  }
  async deleteOrderCategory(
    args: Prisma.OrderCategoryDeleteArgs
  ): Promise<PrismaOrderCategory> {
    return this.prisma.orderCategory.delete(args);
  }
}
