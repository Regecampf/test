/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OrderCategory } from "./OrderCategory";
import { OrderCategoryCountArgs } from "./OrderCategoryCountArgs";
import { OrderCategoryFindManyArgs } from "./OrderCategoryFindManyArgs";
import { OrderCategoryFindUniqueArgs } from "./OrderCategoryFindUniqueArgs";
import { CreateOrderCategoryArgs } from "./CreateOrderCategoryArgs";
import { UpdateOrderCategoryArgs } from "./UpdateOrderCategoryArgs";
import { DeleteOrderCategoryArgs } from "./DeleteOrderCategoryArgs";
import { OrderCategoryService } from "../orderCategory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OrderCategory)
export class OrderCategoryResolverBase {
  constructor(
    protected readonly service: OrderCategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OrderCategory",
    action: "read",
    possession: "any",
  })
  async _orderCategoriesMeta(
    @graphql.Args() args: OrderCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OrderCategory])
  @nestAccessControl.UseRoles({
    resource: "OrderCategory",
    action: "read",
    possession: "any",
  })
  async orderCategories(
    @graphql.Args() args: OrderCategoryFindManyArgs
  ): Promise<OrderCategory[]> {
    return this.service.orderCategories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OrderCategory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OrderCategory",
    action: "read",
    possession: "own",
  })
  async orderCategory(
    @graphql.Args() args: OrderCategoryFindUniqueArgs
  ): Promise<OrderCategory | null> {
    const result = await this.service.orderCategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrderCategory)
  @nestAccessControl.UseRoles({
    resource: "OrderCategory",
    action: "create",
    possession: "any",
  })
  async createOrderCategory(
    @graphql.Args() args: CreateOrderCategoryArgs
  ): Promise<OrderCategory> {
    return await this.service.createOrderCategory({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrderCategory)
  @nestAccessControl.UseRoles({
    resource: "OrderCategory",
    action: "update",
    possession: "any",
  })
  async updateOrderCategory(
    @graphql.Args() args: UpdateOrderCategoryArgs
  ): Promise<OrderCategory | null> {
    try {
      return await this.service.updateOrderCategory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrderCategory)
  @nestAccessControl.UseRoles({
    resource: "OrderCategory",
    action: "delete",
    possession: "any",
  })
  async deleteOrderCategory(
    @graphql.Args() args: DeleteOrderCategoryArgs
  ): Promise<OrderCategory | null> {
    try {
      return await this.service.deleteOrderCategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
